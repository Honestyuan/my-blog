(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{543:function(s,e,t){"use strict";t.r(e);var a=t(2),n=Object(a.a)({},(function(){var s=this,e=s.$createElement,t=s._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h2",{attrs:{id:"json对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#json对象"}},[s._v("#")]),s._v(" JSON对象")]),s._v(" "),t("ol",[t("li",[s._v("本质： JSON字符串，字符串")]),s._v(" "),t("li",[s._v("原生js对象/数组 VS JSON对象/数组")]),s._v(" "),t("li",[s._v("JSON.parse 将JSON对象/数组转换成原生js对象/数组，")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("- 当给JSON.parse传入的数据是非JSON对象/数组会报错\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[s._v("JSON.stringify")])]),s._v(" "),t("h2",{attrs:{id:"object方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object方法"}},[s._v("#")]),s._v(" Object方法")]),s._v(" "),t("h3",{attrs:{id:"object-create"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-create"}},[s._v("#")]),s._v(" Object.create")]),s._v(" "),t("ul",[t("li",[s._v("可以创建新的对象，该对象默认是空对象")]),s._v(" "),t("li",[s._v("可以为该对象添加新的属性")]),s._v(" "),t("li",[s._v("可以为该对象指定原型对象")])]),s._v(" "),t("div",{staticClass:"language-angular2html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var obj = Object.create(obj2, {\n    sex: { // 针对扩展属性呢说明对象\n      value: '男',\n      writable: true,\n      configurable: true,\n      enumerable: true\n    }\n\n  }); // 可以指定原型对象，指定的同时会生成一个新的空对象\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("h3",{attrs:{id:"object-defineproperty-object-defineproperties"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#object-defineproperty-object-defineproperties"}},[s._v("#")]),s._v(" Object.defineProperty || Object.defineProperties")]),s._v(" "),t("ul",[t("li",[s._v("为指定的对象添加新的属性")]),s._v(" "),t("li",[s._v("getter setter 存取器属性")]),s._v(" "),t("li",[s._v("get  获取属性值")]),s._v(" "),t("li",[s._v("set  监听扩展属性值，千万不要在set中直接修改扩展属性，容易造成死循环")])]),s._v(" "),t("div",{staticClass:"language-angular2html line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  var obj4 = {\n      \n    };\n    var test = {\n      name: 'kobe',\n      age: 42\n    }\n    for(let a in test){\n      if(test.hasOwnProperty(a)){\n        Object.defineProperties(obj4, {\n          [a]: {\n            get: function () { // 获取扩展属性值\n              return test[a]\n            },\n            set: function (msg) { // 监视扩展属性\n              console.log(msg, 'msg');\n              test[a] = msg;\n              console.log(test);\n            }\n          }\n        })\n      }\n    }\n    console.log(obj4);\n    obj4.name = 'wade'\n    console.log(obj4.name);\n    console.log(test.name);\n\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br")])]),t("h2",{attrs:{id:"箭头函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[s._v("#")]),s._v(" 箭头函数")]),s._v(" "),t("ol",[t("li",[s._v("语法: let fun = () => 函数体")]),s._v(" "),t("li",[s._v("形参： 形参的个数 ---\x3e ()能否省略")]),s._v(" "),t("li",[s._v("函数体: 语句或者表达式的条数 ---\x3e {} 能否省略")]),s._v(" "),t("li",[s._v("{} 当{}省略的时候，会自动return当前语句或者是表达式的结果")])]),s._v(" "),t("h3",{attrs:{id:"箭头函数特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数特点"}},[s._v("#")]),s._v(" 箭头函数特点:")]),s._v(" "),t("ol",[t("li",[s._v("简洁")]),s._v(" "),t("li",[s._v("箭头函数的this:")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("-  箭头函数没有自己的this，箭头函数的this不是看调用的时候，而是看定义的时候\n-  箭头函数的this是其定义的时候所处的执行上下文对象\n-  箭头函数的this是看其外层是否有函数\n  - 如果有当前箭头函数的this指向同外层函数this指向一样，注意: 外层函数有可能也是箭头函数\n  - 如果外层没有函数，this ---\x3e window\n")])])]),t("h2",{attrs:{id:"promise对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#promise对象"}},[s._v("#")]),s._v(" promise对象")]),s._v(" "),t("ol",[t("li",[s._v("作用： 解决异步回调嵌套问题(回调地狱)，将异步的流程用同步的形式表达出来")]),s._v(" "),t("li",[s._v("思想：\n"),t("ul",[t("li",[s._v("给promise设置的三种状态： pending, resolved, rejected")]),s._v(" "),t("li",[s._v("通过异步任务的执行结果动态的去修改promise的状态")]),s._v(" "),t("li",[s._v("promise状态的改变可以去then方法中的成功或者失败的回调")]),s._v(" "),t("li",[s._v("可以通过resolve，reject调用的时候将数据传递给成功或者失败的回调")])])])]),s._v(" "),t("p",[s._v("async函数")]),s._v(" "),t("ol",[t("li",[s._v("作用: 解决异步回调")]),s._v(" "),t("li",[s._v("语法：")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("```\n  async function foo(){\n    await 异步操作;\n    await 异步操作；\n  }\n\n```\n")])])]),t("ol",{attrs:{start:"3"}},[t("li",[s._v("通常和promise配合使用，")]),s._v(" "),t("li",[s._v("async代表异步， await等待异步执行")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("-  异步任务执行成功以后才会执行后续的代码返回的\n-  根据promise实例对象的状态决定的\n")])])]),t("h2",{attrs:{id:"class类对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#class类对象"}},[s._v("#")]),s._v(" class类对象")]),s._v(" "),t("ol",[t("li",[s._v("语法： class 类对象 {}")]),s._v(" "),t("li",[s._v("用法: new 类对象 ----\x3e 类的实例对象")]),s._v(" "),t("li",[s._v("特点：")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("-  在类里定义的方法都会放在实例对象的原型上\n-  通过static 可以给类对象自身添加属性\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[s._v("extends: 实现继承")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("-  语法： class 子类 extends 父类{}\n-  extends干了什么事情： 子类的原型 = 父类的实例\n")])])]),t("ol",{attrs:{start:"5"}},[t("li",[s._v("super")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("-  当使用extends进行继承的时候在子类的构造方法中必须调用super\n-  调用父类的构造方法，同时修改父类构造方法中的this指向 ---\x3e 子类的实例\n")])])]),t("ol",{attrs:{start:"6"}},[t("li",[s._v("父类的方法重写")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("-  当父类原型上的方法不能满足子类实例的需求的时候\n-  在子类中定义自己的方法供当前子类的实例用\n")])])]),t("h2",{attrs:{id:"深度克隆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度克隆"}},[s._v("#")]),s._v(" 深度克隆：")]),s._v(" "),t("ol",[t("li",[t("p",[s._v("理解：")]),s._v(" "),t("ul",[t("li",[s._v("克隆： 将源数据中的数据拷贝给目标数据中")]),s._v(" "),t("li",[s._v("分类：\n"),t("ul",[t("li",[s._v("基本数据类型拷贝 ---\x3e 值拷贝")]),s._v(" "),t("li",[s._v("引用数据类型拷贝 ---\x3e 拷贝的是引用地址")])])]),s._v(" "),t("li",[s._v("克隆的时候需要关注的是： 拷贝的源数据中是否包含引用数据类型")]),s._v(" "),t("li",[s._v("可能出现的问题： 修改克隆后的数据会影响原数据 ---\x3e 浅拷贝")])])]),s._v(" "),t("li",[t("p",[s._v("浅拷贝：")]),s._v(" "),t("ul",[t("li",[s._v("concat")]),s._v(" "),t("li",[s._v("slice")]),s._v(" "),t("li",[s._v("三点运算符")]),s._v(" "),t("li",[s._v("Object.assign")])])]),s._v(" "),t("li",[t("p",[s._v("深拷贝：")]),s._v(" "),t("ul",[t("li",[s._v("JSON.parse(JSON.stringify(source)) ---\x3e 不能处理函数数据")]),s._v(" "),t("li",[s._v("自己封装实现深度克隆")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  function checkoutType(target) {\n      return Object.prototype.toString.call(target).slice(8, -1)\n    }\n    function clone(target) {\n      let result, targetType = checkoutType(target);\n      // 检测克隆目标的数据类型\n      if(targetType === 'Array'){\n        result = [];\n      }else if(targetType === 'Object'){\n        result = {};\n      }else {\n        return target;\n      }\n      // 思考： 选用哪种方式遍历？？？  需求； 对象的key，数组的index ，结论： for in\n      for(let i in target){\n        // 获取个体元素\n        // result[i] = target[i] 如果原数据中有引用数据类型，就是浅拷贝\n        if(checkoutType(target[i]) === 'Array' || 'Object'){\n          result[i] = clone(target[i])\n        }else {\n          result[i] = target[i]\n        }\n      }\n      return result;\n    }\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br")])]),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])])]),s._v(" "),t("p",[s._v("​")]),s._v(" "),t("h2",{attrs:{id:"set容器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#set容器"}},[s._v("#")]),s._v(" Set容器")]),s._v(" "),t("ol",[t("li",[s._v("定义： 保存多个无序的不重复的value集合体")]),s._v(" "),t("li",[s._v("语法: let set = new Set(Array)")]),s._v(" "),t("li",[s._v("特点： 身上有iterator接口 ---\x3e 可以使用for of || 三点运算符遍历")]),s._v(" "),t("li",[s._v("用途: 给数组去重")])]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("let arr2 = [];\nconsole.log('------ 原生js实现数组去重 -------');\nfor (var i = 0; i < arr.length; i++) {\n  var item = arr[i];\n  if(arr2.indexOf(item) === -1){\n    arr2.push(item)\n  }\n}\n")])])]),t("p",[s._v("​"),t("br"),s._v("\n​    console.log(arr2);\n​    console.log('------ 利用ES6的set去重-------');\n​    function uniqArr(target) {\n​      let set = new Set(target);\n​      let result = [];\n​      for(let i of set){\n​        result.push(i);\n​      }\n​      return result;\n​    }\n​    console.log('------ 精简ES6set去重-------');\n​    let uniqArr2 = target => [...new Set(target)];")]),s._v(" "),t("p",[s._v("​")])])}),[],!1,null,null,null);e.default=n.exports}}]);